#region uses
using System;
using HyperCatalog.Business;
using HyperComponents.Data.dbAccess;
using HyperCatalog.Shared;
using Infragistics.WebUI.Shared;
using System.Web.UI;
using System.Data;
using System.Data.SqlClient;
using Infragistics.Documents.Excel;
using HyperCatalog.ExcelHelper;
#endregion

namespace HyperCatalog.UI.Tools
{
  /// <summary>
  /// some export functions
  /// </summary>
  public class Export
  {
    /// <summary>
    /// Default constructor
    /// </summary>
    public Export() { }

    /// <summary>
    /// Export the containers List in Excel file
    /// </summary>
    /// <param name="page"></param>
      public static void ExportContainers(Page page)
    {
      using (CollectionView cv = new CollectionView(HyperCatalog.Business.Container.GetAll()))
      {
        cv.Sort("GroupId");

        using (CollectionView cvCG = new CollectionView(ContainerGroup.GetAll()))
        {
          using (CollectionView cvCT = new CollectionView(ContainerType.GetAll()))
          {
            using (CollectionView cvDT = new CollectionView(DataType.GetAll()))
            {
              using (CollectionView cvU = new CollectionView(User.GetAll()))
              {
                using (CollectionView cvLG = new CollectionView(LookupGroup.GetAll()))
                {
                  using (CollectionView cvIM = new CollectionView(InheritanceMethod.GetAll()))
                  {

                    // string contains html code to export
                    System.Text.StringBuilder sb = new System.Text.StringBuilder(string.Empty);

                    sb.Append("<html><body>");
                    sb.Append("<table border='1'>");
                    /******** Writing the User info and Current date ***********/
                    int ColCount = 28;
                    sb.Append("<tr style='border: none' valign='top'><td style='font-weight:bold;font-size: 14;border: none; font-family:Arial Unicode MS' colspan=" + ColCount + ">" + "Container Report" + "</td></tr>");
                    sb.Append("<tr style='border: none' valign='top'><td style='font-weight:bold;border: none; font-size: 14; font-family:Arial Unicode MS'>Generated By: </td><td style='border: none; font-size: 14; font-family:Arial Unicode MS' colspan=" + (ColCount - 1).ToString() + ">" + SessionState.User.FullName + "</td></tr>");
                    sb.Append("<tr style='border: none' valign='top'><td style='font-weight:bold;border: none; font-size: 14;font-family:Arial Unicode MS'>Exported On: </td><td style='border: none ;font-size: 14; font-family:Arial Unicode MS' colspan=" + (ColCount - 1).ToString() + ">" + SessionState.User.FormatUtcDate(DateTime.UtcNow, true, "MM/dd/yyyy:HH:mm:ss") + "</td></tr>");

               
                     
                      
                    #region "Header"

                    sb.Append("<tr style='font-size: 14; font-weight: bold;font-family:Arial Unicode MS background-color: lightgrey' wordwrap='true'>");
                    sb.Append("<td>Id</td>");
                    sb.Append("<td>Container group</td>");
                    sb.Append("<td>xmlname</td>");
                    sb.Append("<td>Name</td>");
                    sb.Append("<td>Label</td>");
                    sb.Append("<td>Definition</td>");
                    sb.Append("<td>Entry rule</td>");
                    sb.Append("<td>Sample</td>");
                    sb.Append("<td>Data type</td>");
                    sb.Append("<td>Container type</td>");
                    sb.Append("<td>Lookup</td>");
                    sb.Append("<td>Input mask</td>");
                    sb.Append("<td>Max length</td>");
                    sb.Append("<td>Translatable</td>");
                    sb.Append("<td>Regionalizable</td>");
                    sb.Append("<td>Localizable</td>");
                    sb.Append("<td>Publishable</td>");
                    sb.Append("<td>Readonly</td>");
                    sb.Append("<td>Keep if obsolete</td>");
                    sb.Append("<td>Inheritance method</td>");
                    sb.Append("<td>Sort</td>");
                    sb.Append("<td>Segment</td>");
                    sb.Append("<td>ValidationMask</td>");
                    sb.Append("<td>WWXPath</td>");
                    sb.Append("<td>Creator</td>");
                    sb.Append("<td>Create date</td>");
                    sb.Append("<td>Modifier</td>");
                    sb.Append("<td>Modifier date</td>");
                    sb.Append("</tr>");
                    #endregion

                    string cellColor = "#D0D0D0", defaultCellColor = "#D0D0D0";
                    for (int i = 0; i < cv.Count; i++)
                    {
                      Container curContainer = ((Container)cv[i]);
                      sb.Append("<tr valign='top' style='font-size: 14; font-family:Arial Unicode MS;background-color: " + cellColor + ";text-color: black;'>");
                      sb.Append("<td>" + curContainer.Id + "</td>");
                      //********************************************************************************************
                      //GADSC Code Change for displaying the Goup/Subgroup path of the container group in the report
                      //Ezilla Bug N0:68758
                      //Modified By:Kanthi.J
                      //********************************************************************************************
                      cvCG.ApplyFilter("Id", curContainer.GroupId, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                      sb.Append("<td>" + ((ContainerGroup)cvCG[0]).Path +((ContainerGroup)cvCG[0]).Name+ "</td>");
                      sb.Append("<td>" + curContainer.Tag + "</td>");
                      sb.Append("<td>" + curContainer.Name + "</td>");
                      sb.Append("<td>" + curContainer.Label + "</td>");
                      sb.Append("<td>" + curContainer.Definition + "</td>");
                      sb.Append("<td>" + curContainer.EntryRule + "</td>");
                      sb.Append("<td>" + curContainer.Sample + "</td>");
                      cvDT.ApplyFilter("Code", curContainer.DataTypeCode, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                      sb.Append("<td>" + ((DataType)cvDT[0]).Name + "</td>");
                      cvCT.ApplyFilter("Code", curContainer.ContainerTypeCode, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                      sb.Append("<td>" + ((ContainerType)cvCT[0]).Name + "</td>");
                      if (curContainer.LookupId == -1) { sb.Append("<td></td>"); }
                      else
                      {
                        cvLG.ApplyFilter("Id", curContainer.LookupId, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                        sb.Append("<td>" + ((LookupGroup)cvLG[0]).Name + "</td>");
                      }
                      sb.Append("<td>" + curContainer.InputMask + "</td>");
                      sb.Append("<td>" + curContainer.MaxLength + "</td>");
                      sb.Append("<td>" + curContainer.Translatable + "</td>");
                      sb.Append("<td>" + curContainer.Regionalizable + "</td>");
                      sb.Append("<td>" + curContainer.Localizable + "</td>");
                      sb.Append("<td>" + curContainer.Publishable + "</td>");
                      sb.Append("<td>" + curContainer.ReadOnly + "</td>");
                      sb.Append("<td>" + curContainer.KeepIfObsolete + "</td>");
                      cvIM.ApplyFilter("Id", curContainer.InheritanceMethodId, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                      sb.Append("<td>" + ((InheritanceMethod)cvIM[0]).Name + "</td>");
                      sb.Append("<td>" + curContainer.Sort + "</td>");
                      sb.Append("<td>" + curContainer.SegmentId + "</td>");
                      sb.Append("<td>" + curContainer.ValidationMask + "</td>");
                      sb.Append("<td>" + curContainer.WWXPath + "</td>");
                      cvU.ApplyFilter("Id", curContainer.CreatorId, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                      sb.Append("<td>" + ((User)cvU[0]).FullName + "</td>");
                      sb.Append("<td>" + curContainer.CreateDate + "</td>");
                      if (curContainer.ModifierId == -1) { sb.Append("<td></td>"); }
                      else
                      {
                        cvU.ApplyFilter("Id", curContainer.ModifierId, HyperCatalog.Business.CollectionView.FilterOperand.Equals);
                      }
                      sb.Append("<td>" + ((User)cvU[0]).FullName + "</td>");
                      sb.Append("<td>" + curContainer.ModifyDate + "</td>");

                      sb.Append("</tr>");
                      if (cellColor == defaultCellColor) { cellColor = "white"; }
                      else { cellColor = defaultCellColor; }

                    }

                    sb.Append("</table>");
                    sb.Append("</body></html>");

                    string fileName = string.Empty;
                    fileName += "Containers.xls";

                    string exportContent = sb.ToString();
                    page.Response.Clear();
                    page.Response.ClearContent();
                    page.Response.ClearHeaders();
                    page.Response.Charset = string.Empty;
                    page.Response.AddHeader("content-disposition", "attachment;filename=" + fileName);
                    page.Response.ContentType = "application/vnd.ms-excel;";
                    //Fix for CR 5109 - Prabhu R S
                    page.Response.ContentEncoding = System.Text.Encoding.UTF8;
                    page.EnableViewState = false;
                    page.Response.Write(exportContent);
                    page.Response.End();
                  }
                }
              }
            }
          }
        }
      }
    }


    /// <summary>
    /// Export the lookups List with values in Excel file
    /// </summary>
    /// <param name="page"></param>
    public static void ExportLookups(Page page)
    {
      using (LookupGroupList lList = LookupGroup.GetAll())
      {

        // string contains html code to export
        System.Text.StringBuilder sb = new System.Text.StringBuilder(string.Empty);

        sb.Append("<html><body>");
        sb.Append("<table border='1'>");

        #region "Header"
        sb.Append("<tr align='center' style='font-size: 14; font-weight: bold; background-color: lightgrey' wordwrap='true'>");
        sb.Append("<td>Id</td>");
        sb.Append("<td>Name</td>");
        sb.Append("<td>Comment</td>");
        sb.Append("<td>Multi choice</td>");
        sb.Append("<td>Sep</td>");
        sb.Append("<td>Value</td>");
        sb.Append("<td>Comment</td>");
        sb.Append("<td>Sort</td>");
        sb.Append("</tr>");
        #endregion

        string cellColor = "#D0D0D0", defaultCellColor = "#D0D0D0";
        for (int i = 0; i < lList.Count; i++)
        {
          LookupGroup curLookupGroup = lList[i];
          LookupValueList lvList = LookupGroup.GetByKey(curLookupGroup.Id).Values;
          for (int j = 0; j < lvList.Count; j++)
          {
            LookupValue curLookupValue = lvList[j];

            sb.Append("<tr valign='top' style='background-color: " + cellColor + "; text-color: black;'>");
            sb.Append("<td>" + curLookupGroup.Id + "</td>");
            sb.Append("<td>" + curLookupGroup.Name + "</td>");
            sb.Append("<td>" + curLookupGroup.Comment + "</td>");
            sb.Append("<td>" + curLookupGroup.MultiChoice + "</td>");
            sb.Append("<td>" + curLookupValue.Text + "</td>");
            sb.Append("<td>" + curLookupValue.Comment + "</td>");
            sb.Append("<td>" + curLookupValue.Sort + "</td>");
            sb.Append("</tr>");
            if (cellColor == defaultCellColor) { cellColor = "white"; }
            else { cellColor = defaultCellColor; }
          }
        }

        sb.Append("</table>");
        sb.Append("</body></html>");

        string fileName = string.Empty;
        fileName += "Lookups.xls";

        string exportContent = sb.ToString();
        page.Response.Clear();
        page.Response.ClearContent();
        page.Response.ClearHeaders();
        page.Response.Charset = string.Empty;
        page.Response.AddHeader("content-disposition", "attachment;filename=" + fileName);
        page.Response.ContentType = "application/vnd.ms-excel;";
        //Fix for CR 5109 - Prabhu R S
        page.Response.ContentEncoding = System.Text.Encoding.UTF8; 
        page.EnableViewState = false;
        page.Response.Write(exportContent);
        page.Response.End();
      }
    }


    /// <summary>
    /// Export the containers List of an Input form in Excel file
    /// </summary>
    /// <param name="page"></param>
    public static void ExportIFContainers(int ifid, Page page)
    {
      using (InputForm ifObj = InputForm.GetByKey(ifid))
      {
        if (ifObj != null)
        {
          using (Database dbObj = Utils.GetMainDB())
          {
            using (DataSet ds = dbObj.RunSPReturnDataSet("dbo._InputForm_GetContainersExport", "",
                new SqlParameter("@InputFormId", ifid)))
            {
              dbObj.CloseConnection();
              if (dbObj.LastError != string.Empty)
              {
                page.Response.Write(dbObj.LastError);
                page.Response.End();
              }

              // Parse all containers in table 0 to name properly other tables in dataset
              int listTableIndex = 0;
              ds.Tables[0].TableName = Utils.CleanFileName(ifObj.Name);
              foreach (DataRow dr in ds.Tables[0].Rows)
              {
                if (dr["Type"].ToString() != "Normal")
                {
                  listTableIndex++;
                  ds.Tables[listTableIndex].TableName = Utils.CleanFileName(dr["Tag"].ToString() + " [" + dr["Type"].ToString().Substring(0, 1) + "]");
                }
                else
                {
                  if (dr["Lookup"].ToString() == "X")
                  {
                    listTableIndex++;
                    ds.Tables[listTableIndex].TableName = Utils.CleanFileName(dr["Tag"].ToString() + " [Lookup]");
                  }
                }
              }

              Workbook theWorkBook =
                ExcelExporter.DataSetToExcel(ds);
              foreach (Worksheet w in theWorkBook.Worksheets)
              {
                if (w.Index == 0)
                {
                  w.Rows[0].Cells[0].Value = w.Rows[0].Cells[0].Value.ToString() + " (exported on " + SessionState.User.FormatUtcDate(DateTime.UtcNow, true, SessionState.User.FormatDate) + " by " + SessionState.User.FullName + ")";
                }
                for (int j = 0; w.Rows[1].Cells[j].Value != null; j++)
                {
                  w.DefaultColumnWidth = 5000;
                  w.Rows[1].Cells[j].CellFormat.Font.Bold = ExcelDefaultableBoolean.True;
                  w.Rows[1].Cells[j].CellFormat.Font.Color = System.Drawing.Color.White;
                  w.Rows[1].Cells[j].CellFormat.FillPatternBackgroundColor = System.Drawing.Color.DarkBlue;
                  for (int i = 0; w.Rows[i].Cells[0].Value != null; i++)
                  {
                    w.Rows[i].Cells[j].CellFormat.BottomBorderStyle = CellBorderLineStyle.Thin;
                    w.Rows[i].Cells[j].CellFormat.RightBorderStyle = CellBorderLineStyle.Thin;
                    if (i > 0)
                    {
                        w.Rows[i].Cells[j].CellFormat.LeftBorderStyle = CellBorderLineStyle.Thin;
                        w.Rows[i].Cells[j].CellFormat.TopBorderStyle = CellBorderLineStyle.Thin;
                    }
                    w.Rows[i].Cells[j].CellFormat.BottomBorderColor = System.Drawing.Color.Black;
                    w.Rows[i].Cells[j].CellFormat.RightBorderColor = System.Drawing.Color.Black;
                    if (i > 0)
                    {
                        w.Rows[i].Cells[j].CellFormat.LeftBorderColor = System.Drawing.Color.Black;
                        w.Rows[i].Cells[j].CellFormat.TopBorderColor = System.Drawing.Color.Black;
                    }
                  }
                }
              }
              ExcelExporter.WriteToResponse(theWorkBook,
                                    Utils.CleanFileName("InputForm [" + ifObj.Name + "].xls"),
                                    page.Response);
            }
          }
        }
        else
        {
          page.Response.Write("InputForm doesn't exist");
          page.Response.End();
        }
      }
    }

    public static void ExportCartography(System.Int64 entryPointId, Page page)
    {
      WorksheetCell cell;
      using (Database dbObj = Utils.GetMainDB())
      {
        using (DataSet ds = dbObj.RunSPReturnDataSet("dbo._InputForm_Cartography", "",
            new SqlParameter("@ItemId", entryPointId)))
        {
          dbObj.CloseConnection();
          if (dbObj.LastError != string.Empty)
          {
            page.Response.Write(dbObj.LastError);
            page.Response.End();
          }
          if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
          {
            #region Rename DataSet Tables
            HyperCatalog.Business.Item curItem = HyperCatalog.Business.Item.GetByKey(entryPointId);
            for (int i = 0; i < ds.Tables.Count; i++)
            {
              i++;
              DataRow dr = ds.Tables[i - 1].Rows[0];
              string tableName = "[" + dr["LevelId"].ToString() + "] - " + dr["ItemName"].ToString();
              if (dr["ItemNumber"].ToString() != string.Empty)
                tableName += "[" + dr["ItemNumber"].ToString() + "]";
              if (ds.Tables[tableName] == null)
              {
                ds.Tables[i].TableName = Utils.CleanFileName(tableName);
              }
              else
              {
                ds.Tables[i].TableName = Utils.CleanFileName(tableName) + " (doublon!! " + DateTime.UtcNow.Millisecond.ToString() + ")";
              }
            }
            #endregion
            for (int i = 0; i < ds.Tables.Count; i++)
            {
              ds.Tables.Remove(ds.Tables[i]);
            }
            for (int i = 0; i < ds.Tables.Count; i++)
            {
              foreach (DataRow dr in ds.Tables[i].Rows)
              {
                dr[0] = "[" + dr[3].ToString() + "] - " + dr[0].ToString() + dr[1].ToString() + " (#" + dr[2].ToString() + ")";
                dr[5] = dr[5].ToString() + " (#" + dr[4].ToString() + ")";
              }
              ds.Tables[i].Columns.Remove("ItemName");
              ds.Tables[i].Columns.Remove("ItemId");
              ds.Tables[i].Columns.Remove("ItemLevelId");
              ds.Tables[i].Columns.Remove("L0");
              ds.Tables[i].Columns.Remove("IFShortName");
              ds.Tables[i].Columns.Remove("InputFormId");
              ds.Tables[i].Columns.Remove("IsActive");
              ds.Tables[i].Columns.Remove("Herited");
              ds.Tables[i].Columns.Remove("MinLevel");
              ds.Tables[i].Columns["IfLongName"].ColumnName = "Input Form";
              ds.Tables[i].Columns["ItemPath"].ColumnName = "Item";
            }
            Workbook theWorkBook = ExcelExporter.DataSetToExcel(ds);
            foreach (Worksheet w in theWorkBook.Worksheets)
            {
              int nbRows;
              int nbCols;
              for (nbRows = 1; w.Rows[nbRows].Cells[0].Value != null; nbRows++) { }
              for (nbCols = 1; w.Rows[0].Cells[nbCols].Value != null; nbCols++) { }

              // Colorize and Format
              for (int j = 0; j < nbCols; j++)
              {
                cell = w.Rows[1].Cells[j];
                cell.CellFormat.Font.Bold = ExcelDefaultableBoolean.True;
                cell.CellFormat.Font.Color = System.Drawing.Color.White;
                cell.CellFormat.FillPattern = FillPatternStyle.Gray12percent;
                cell.CellFormat.FillPatternBackgroundColor = System.Drawing.Color.DarkBlue;
                for (int i = 0; i < nbRows; i++)
                {

                  cell = w.Rows[i].Cells[j];
                  cell.CellFormat.BottomBorderStyle = CellBorderLineStyle.Thin;
                  cell.CellFormat.LeftBorderStyle = CellBorderLineStyle.Thin;
                  cell.CellFormat.RightBorderStyle = CellBorderLineStyle.Thin;
                  cell.CellFormat.TopBorderStyle = CellBorderLineStyle.Thin;
                  cell.CellFormat.BottomBorderColor = System.Drawing.Color.Black;
                  cell.CellFormat.LeftBorderColor = System.Drawing.Color.Black;
                  cell.CellFormat.RightBorderColor = System.Drawing.Color.Black;
                  cell.CellFormat.TopBorderColor = System.Drawing.Color.Black;
                }
              }
              w.Columns[0].Width = 12000;
              w.Columns[1].Width = 10000;
              for (int i = 2; i < nbCols; i++)
              {
                w.Columns[i].Width = 1000;
                w.Columns[i].CellFormat.Alignment = HorizontalCellAlignment.Center;
              }
              // Consider Inherited input forms and put in italic the text
              // Also put in yellow the boxes where the input forms are attached
              for (int i = 2; i < nbRows; i++)
              {
                int rowLevelId = Convert.ToInt32(w.Rows[i].Cells[0].Value.ToString().Substring(1, 1));
                if (rowLevelId < curItem.LevelId)
                {
                  for (int j = 0; j < nbCols; j++)
                  {
                    w.Rows[i].Cells[j].CellFormat.Font.Italic = ExcelDefaultableBoolean.True;
                    //w.Rows[i].Cells[j].CellFormat.FillPattern = FillPatternStyle.Solid;
                    //w.Rows[i].Cells[j].CellFormat.FillPatternForegroundColor = System.Drawing.Color.Silver;
                  }
                }
                w.Rows[i].Cells[1 + rowLevelId].CellFormat.FillPattern = FillPatternStyle.Solid;
                w.Rows[i].Cells[1 + rowLevelId].CellFormat.FillPatternForegroundColor = System.Drawing.Color.Yellow;
              }
              w.Columns[2].Hidden = true;
              #region Add Legend

              cell = w.Rows[nbRows + 2].Cells[0];
              cell.Value = "Legend";
              cell.CellFormat.Font.Bold = ExcelDefaultableBoolean.True;
              cell.CellFormat.Font.Color = System.Drawing.Color.White;
              cell.CellFormat.FillPattern = FillPatternStyle.Gray12percent;
              cell.CellFormat.FillPatternBackgroundColor = System.Drawing.Color.DarkBlue;
              cell = w.Rows[nbRows + 3].Cells[0];
              cell.Value = "Input Forms are attached here";
              cell.CellFormat.FillPattern = FillPatternStyle.Solid;
              cell.CellFormat.FillPatternForegroundColor = System.Drawing.Color.Yellow;
              cell = w.Rows[nbRows + 4].Cells[0];
              cell.Value = "X: Input Form applies here";
              for (int i = nbRows + 2; i < nbRows + 4; i++)
              {
                cell = w.Rows[i].Cells[0];
                cell.CellFormat.BottomBorderStyle = CellBorderLineStyle.Thin;
                cell.CellFormat.LeftBorderStyle = CellBorderLineStyle.Thin;
                cell.CellFormat.RightBorderStyle = CellBorderLineStyle.Thin;
                cell.CellFormat.TopBorderStyle = CellBorderLineStyle.Thin;
                cell.CellFormat.BottomBorderColor = System.Drawing.Color.Black;
                cell.CellFormat.LeftBorderColor = System.Drawing.Color.Black;
                cell.CellFormat.RightBorderColor = System.Drawing.Color.Black;
                cell.CellFormat.TopBorderColor = System.Drawing.Color.Black;
              }
              #endregion

            }
            ExcelExporter.WriteToResponse(theWorkBook,
                                    Utils.CleanFileName("Cartography [" + curItem.FullName + "].xls"),
                                    page.Response);

            if (ds != null)
              ds.Dispose();
          }
          else
          {
            if (ds != null)
              ds.Dispose();

            page.ClientScript.RegisterClientScriptBlock(page.GetType(), "alert", "<script>alert('No cartography!');</script>");
          }
        }
      }
    }
    public static void ExportInstantTinyTMReport(DataSet ds, string itemName, Page page)
    {
      ds.Tables[0].TableName = "Overall Report";
      ds.Tables[1].TableName = "Detailled Report";
      // Remove Absolute Sort Columns
      ds.Tables[0].Columns.Remove(ds.Tables[0].Columns[ds.Tables[0].Columns.Count - 1]);
      ds.Tables[1].Columns.Remove(ds.Tables[1].Columns[ds.Tables[1].Columns.Count - 1]);
      ds.Tables[1].Columns.Remove(ds.Tables[1].Columns[ds.Tables[1].Columns.Count - 1]);
      Workbook theWorkBook = ExcelExporter.DataSetToExcel(ds);
      foreach (Worksheet w in theWorkBook.Worksheets)
      {
        int nbRows;
        int nbCols;
        for (nbRows = 1; w.Rows[nbRows].Cells[0].Value != null; nbRows++) { }
        for (nbCols = 1; w.Rows[0].Cells[nbCols].Value != null; nbCols++) { }

        // Colorize and Format
        for (int j = 0; j < nbCols; j++)
        {
          w.Rows[1].Cells[j].CellFormat.Font.Bold = ExcelDefaultableBoolean.True;
          w.Rows[1].Cells[j].CellFormat.Font.Color = System.Drawing.Color.White;
          w.Rows[1].Cells[j].CellFormat.FillPattern = FillPatternStyle.Gray12percent;
          w.Rows[1].Cells[j].CellFormat.FillPatternBackgroundColor = System.Drawing.Color.DarkBlue;
          for (int i = 0; i < nbRows; i++)
          {
            w.Rows[i].Cells[j].CellFormat.BottomBorderStyle = CellBorderLineStyle.Thin;
            w.Rows[i].Cells[j].CellFormat.LeftBorderStyle = CellBorderLineStyle.Thin;
            w.Rows[i].Cells[j].CellFormat.RightBorderStyle = CellBorderLineStyle.Thin;
            w.Rows[i].Cells[j].CellFormat.TopBorderStyle = CellBorderLineStyle.Thin;
            w.Rows[i].Cells[j].CellFormat.BottomBorderColor = System.Drawing.Color.Black;
            w.Rows[i].Cells[j].CellFormat.LeftBorderColor = System.Drawing.Color.Black;
            w.Rows[i].Cells[j].CellFormat.RightBorderColor = System.Drawing.Color.Black;
            w.Rows[i].Cells[j].CellFormat.TopBorderColor = System.Drawing.Color.Black;
          }
        }
        if (w.Index == 1)
        {
          w.Columns[0].Width = 2000;
          w.Columns[1].Width = 2000;
          w.Columns[2].Width = 8000;
          w.Columns[3].Width = 3000;
          w.Columns[4].Width = 1500;
          w.Columns[5].Width = 5000;
          w.Columns[6].Width = 8000;
          w.Columns[7].Width = 8000;
          w.Columns[8].Width = 3000;
          w.Columns[9].Width = 10000;
          w.Columns[10].Width = 10000;
          w.Columns[11].Width = 3000;
        }
        else
        {
          w.Columns[0].Width = 10000;
          w.Columns[1].Width = 5000;
          w.Columns[2].Width = 5000;
          w.Columns[3].Width = 5000;
          w.Columns[4].Width = 5000;
        }
      }
      ExcelExporter.WriteToResponse(theWorkBook,
                              Utils.CleanFileName(itemName + " - TinyTM Report.xls"),
                              page.Response);

    }
    public static void ExportTermReport(DataSet ds, string termType, Page page)
    {
      if (ds != null && ds.Tables.Count >= 1)
      {
        ds.Tables[0].TableName = "Overall Report";
        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
          ds.Tables[i + 1].TableName = "[" + ds.Tables[0].Rows[i][0].ToString() + "] - " + ds.Tables[0].Rows[i][1].ToString();
        }
        ds.Tables.Remove(ds.Tables[0]);
        Workbook theWorkBook = ExcelExporter.DataSetToExcel(ds);
        foreach (Worksheet w in theWorkBook.Worksheets)
        {
          int nbRows;
          int nbCols;
          for (nbRows = 1; w.Rows[nbRows].Cells[0].Value != null; nbRows++) { }
          for (nbCols = 1; w.Rows[0].Cells[nbCols].Value != null; nbCols++) { }

          // Colorize and Format
          for (int j = 0; j < nbCols; j++)
          {
            w.Rows[1].Cells[j].CellFormat.Font.Bold = ExcelDefaultableBoolean.True;
            w.Rows[1].Cells[j].CellFormat.Font.Color = System.Drawing.Color.White;
            w.Rows[1].Cells[j].CellFormat.FillPattern = FillPatternStyle.Gray12percent;
            w.Rows[1].Cells[j].CellFormat.FillPatternBackgroundColor = System.Drawing.Color.DarkBlue;
            for (int i = 0; i < nbRows; i++)
            {
              w.Rows[i].CellFormat.WrapText = ExcelDefaultableBoolean.True;
              w.Rows[i].CellFormat.VerticalAlignment = VerticalCellAlignment.Top;
              w.Rows[i].Cells[j].CellFormat.BottomBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.LeftBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.RightBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.TopBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.BottomBorderColor = System.Drawing.Color.Black;
              w.Rows[i].Cells[j].CellFormat.LeftBorderColor = System.Drawing.Color.Black;
              w.Rows[i].Cells[j].CellFormat.RightBorderColor = System.Drawing.Color.Black;
              w.Rows[i].Cells[j].CellFormat.TopBorderColor = System.Drawing.Color.Black;
            }
          }
          w.Columns[0].Width = 2000;
          w.Columns[1].Width = 1500;
          w.Columns[2].Width = 14000;
          w.Columns[3].Width = 14000;
        }
        ExcelExporter.WriteToResponse(theWorkBook,
                                Utils.CleanFileName(termType + " - extract.xls"),
                                page.Response);
      }
      else
      {
        throw new Exception("The dataset provided was either null or empty");
      }

    }
    public static void ExportTermValidationReport(DataSet ds, DateTime startDate, Page page)
    {
      if (ds != null && ds.Tables.Count >= 1)
      {
        ds.Tables[0].TableName = "Validation Report";
        ds.Tables[0].Columns.RemoveAt(1);
        Workbook theWorkBook = ExcelExporter.DataSetToExcel(ds);
        foreach (Worksheet w in theWorkBook.Worksheets)
        {
          int nbRows;
          int nbCols;
          for (nbRows = 1; w.Rows[nbRows].Cells[0].Value != null; nbRows++) { }
          for (nbCols = 1; w.Rows[0].Cells[nbCols].Value != null; nbCols++) { }

          // Colorize and Format
          for (int j = 0; j < nbCols; j++)
          {
            w.Rows[1].Cells[j].CellFormat.Font.Bold = ExcelDefaultableBoolean.True;
            w.Rows[1].Cells[j].CellFormat.Font.Color = System.Drawing.Color.White;
            w.Rows[1].Cells[j].CellFormat.FillPattern = FillPatternStyle.Gray12percent;
            w.Rows[1].Cells[j].CellFormat.FillPatternBackgroundColor = System.Drawing.Color.DarkBlue;
            for (int i = 0; i < nbRows; i++)
            {
              w.Rows[i].CellFormat.WrapText = ExcelDefaultableBoolean.True;
              w.Rows[i].CellFormat.VerticalAlignment = VerticalCellAlignment.Top;
              w.Rows[i].Cells[j].CellFormat.BottomBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.LeftBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.RightBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.TopBorderStyle = CellBorderLineStyle.Thin;
              w.Rows[i].Cells[j].CellFormat.BottomBorderColor = System.Drawing.Color.Black;
              w.Rows[i].Cells[j].CellFormat.LeftBorderColor = System.Drawing.Color.Black;
              w.Rows[i].Cells[j].CellFormat.RightBorderColor = System.Drawing.Color.Black;
              w.Rows[i].Cells[j].CellFormat.TopBorderColor = System.Drawing.Color.Black;
            }
          }
          w.Columns[0].Width = 10000;
          w.Columns[1].Width = 10000;
          w.Columns[2].Width = 10000;
          w.Columns[4].Width = 10000;
          w.Columns[5].Width = 4500;
        }
        ExcelExporter.WriteToResponse(theWorkBook,
                                Utils.CleanFileName("validation report from " + startDate.ToShortDateString() + ".xls"),
                                page.Response);
      }
      else
      {
        throw new Exception("The dataset provided was either null or empty");
      }

    }

  }
}
