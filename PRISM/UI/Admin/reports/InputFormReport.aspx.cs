using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.IO;
using System.Text;
using System.Collections.Specialized;
using HyperCatalog.Shared;
using HyperComponents.Data.dbAccess;
using HyperCatalog.Business;
//using HyperCatalog.UI.Tools;

public partial class UI_Admin_InputFormReport : System.Web.UI.Page
{
    //This method writes into an Excel file and exports it
    protected void fnWriteXLS(String StoredProcedureName, String FileName)
    {

        Boolean AllTrue = new Boolean();
        String SQLQuery;
        string strReturn = "";
        Database dbObj = new Database(HyperCatalog.Business.ApplicationSettings.Components["Datawarehouse_DB"].ConnectionString);
        StringBuilder returnValue = new StringBuilder();
        StringBuilder returnName = new StringBuilder();
        AllTrue = false;
        foreach (ListItem thisItem in lbInputformName.Items)
        {
            if (thisItem.Selected)
            {
                //if (thisItem.Text == "ALL")
                //{
                //    AllTrue = true;
                //}
                returnValue.Append(thisItem.Value + ", ");
                returnName.Append(thisItem.Text + ", ");

            }
        }
        returnValue.Remove(returnValue.Length - 2, 2);
        returnName.Remove(returnName.Length - 2, 2);
        try
        {
            DataSet InputformDS = new DataSet();


            InputformDS = dbObj.RunSPReturnDataSet(StoredProcedureName,
                new SqlParameter("@parm_Input_Form_Id", returnValue.ToString()));


            if (InputformDS.Tables[0].Rows.Count != 0)
            {
                System.Text.StringBuilder sb = new System.Text.StringBuilder(string.Empty);
                sb.Append("<html><head>");
                sb.Append("</head><body style='font-size: 14; font-family:Arial Unicode MS'>");
                sb.Append("<table style='font-size: 14; font-family:Arial Unicode MS' border = '1'>");
                sb.Append(FileName + "<br>");
                sb.Append("Selected Input Forms: " + returnName + "<br>");
                sb.Append("Generated By " + SessionState.User.FullName + "<br>");
                sb.Append("Exported On: " + SessionState.User.FormatUtcDate(DateTime.UtcNow, true, "MM/dd/yyyy") + "<br>");
               
                DataTable dt = InputformDS.Tables[0];
                sb.Append("</TR>");

                DataColumnCollection tableColumns = InputformDS.Tables[0].Columns;
                //DataRowCollection tableRows = ds3.Tables[0].Rows;
                sb.Append("<tr>");
                foreach (DataColumn c in tableColumns)
                {
                    sb.Append("<th style='font-size: 14; font-family:Arial Unicode MS'>" + c.ColumnName.ToString() + "</th>");
                }
                sb.Append("</tr>");
                foreach (DataRow dr in dt.Rows)
                {
                    sb.Append("<tr>");
                    foreach (DataColumn dc in dt.Columns)
                    {

                        sb.Append("<td style='font-size: 14; font-family:Arial Unicode MS'>" + dr[dc].ToString() + "</td>");

                    }
                    sb.Append("</tr>");
                }
                sb.Append("</table>");
                sb.Append("</body></html>");
                Response.Clear();
                Response.ClearContent();
                Response.ClearHeaders();
                Response.Charset = string.Empty;
                Response.AddHeader("content-disposition", "attachment;filename=" + FileName + ".xls");
                Response.ContentType = "application/vnd.ms-excel;";
                //page.Response.ContentType = "application/vnd.ms-excel;charset=UTF-8";
                //Fix for CR 5109 - Prabhu R S
                Response.ContentEncoding = System.Text.Encoding.UTF8;      //page.Response.AppendHeader("Content-Length", System.Text.Encoding.UTF8.GetByteCount(exportContent).ToString());
                EnableViewState = false;
                Response.Write(sb.ToString());
                Response.End(); 
            }
            else
            {
                Page.ClientScript.RegisterClientScriptBlock(typeof(Page), "ClientScript", "alert('Records not available for the selected input');", true);
            }
        }
        catch (Exception ex)
        {

            //Page.ClientScript.RegisterClientScriptBlock(typeof(Page), "ClientScript", "alert('Records not available for the selected input');", true);
            Response.Write(ex.Message.ToString());
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {

        Database dbObj = new Database(HyperCatalog.Business.ApplicationSettings.Components["Datawarehouse_DB"].ConnectionString);
        if (!Page.IsPostBack)
        {
            DataSet InputformDS = new DataSet();

            InputformDS = dbObj.RunSQLReturnDataSet("_Reports_InputFormDropDown");
            if (dbObj.LastError == string.Empty || InputformDS.Tables[0].Rows.Count > 0)
            {

                lbInputformName.DataSource = InputformDS.Tables[0].DefaultView;
                lbInputformName.DataTextField = "Name";
                lbInputformName.DataValueField = "InputFormId";
                lbInputformName.DataBind();
                lbInputformName.SelectedIndex = 0;
            }
        }
    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        try
        {
            fnWriteXLS("_Reports_Input_Form_List_Report", "InputFormListReport");
        }
        catch (Exception ex)
        {
            //Page.ClientScript.RegisterClientScriptBlock(typeof(Page), "ClientScript", "alert('Records not available for the selected input');", true);
            Response.Write(ex.Message.ToString());
        }
       

    }
    protected void lbInputformName_SelectedIndexChanged(object sender, EventArgs e)
    {


    }

    protected void BtnUsageReport_Click(object sender, EventArgs e)
    {
        try
        {
            fnWriteXLS("_Reports_Input_Form_Usage_Report", "InputFormUsageReport");
        }
        catch (Exception ex)
        {
            //Page.ClientScript.RegisterClientScriptBlock(typeof(Page), "ClientScript", "alert('Records not available for the selected input');", true);
            Response.Write(ex.Message.ToString());
        }
    }


}
